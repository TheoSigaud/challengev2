import Head from 'next/head'
import AdminLayout from "@/components/layouts/Admin";
import Modal from "@/components/Modal";
import 'flowbite';
import { useCallback, useEffect, useState } from 'react';
import Link from 'next/link';
import { useSupabaseClient } from '@supabase/auth-helpers-react';

interface Company {
    id: number;
    name: string;
    address: string;
    number: string;
    email: string;
    zipcode: string;
    city: string;
    message: string;
}

export default function Company() {

    const [companies, setCompanies] = useState([]);
    const [name, setName] = useState("")
    const [success, setSuccess] = useState("");
    const [error, setError] = useState("");
    const [showModal, setShowModal] = useState(false);
    const [showUpdateModal, setShowUpdateModal] = useState(false);
    const [showDeleteModal, setShowDeleteModal] = useState(false);
    const [companySelected, setCompanySelected] = useState<Company | undefined>(undefined);
    const supabase = useSupabaseClient()

    useEffect( () => {
     document.body.classList.add("bg-custom-light-blue");
        getCompanies();

        
    },[]);

    const getCompanies = useCallback( async () => {


        const {data: {session}} = await supabase.auth.getSession();
        await fetch(`${process.env.NEXT_PUBLIC_CLIENT_API}/company/companies`,{
            method:'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + session?.access_token
            }
        })
        .then(response => response.json())
        .then( (data) => {
            setCompanies(data)
            
        }).catch( (error) =>{
            console.log(error);
            
        });

    },[])

    const update = useCallback( async (e: any ) => {

        e.preventDefault();

        const {data: {session}} = await supabase.auth.getSession();
        await fetch(`${process.env.NEXT_PUBLIC_CLIENT_API}/company/updateCompanyAdmin/${companySelected?.id}`,{
            method:'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + session?.access_token
            },
            body: JSON.stringify({
                name: companySelected?.name,
                email: companySelected?.email,
                address: companySelected?.address,
                city: companySelected?.city,
                zipcode: companySelected?.zipcode,
                number: companySelected?.number,
                message: companySelected?.message,
            })
        })
        .then(response => response.json())
        .then( (data) => {
            
            if (data.statusCode === 200){
                setSuccess("L'entreprise a bien été modifiée.")
                setError("")
                getCompanies();
            }else{
                setError(data.response.message)
                setSuccess("")
            }
            setShowUpdateModal(false);
         
        }).catch( (error) =>{
            console.log(error);  
        });
                

    },[companySelected])


    const openModal = useCallback( async (company:Company, isUpdate : boolean) => {
        isUpdate ? setShowUpdateModal(true) :  setShowDeleteModal(true);
        setCompanySelected(company);
    },[])


    return (
        <>
             <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <AdminLayout>
                <div className="p-4 sm:ml-64">
                    <div className="p-4 mt-14">


                        {showUpdateModal ? (
                            <>
                            <Modal setShowModal={setShowUpdateModal} title="Modification">
                                <form onSubmit={update}>
                                    <div className="mb-4">
                                
                                    <div>
                                        <div>
                                            <label className="block mb-2 text-sm font-medium text-gray-900">Nom de l'entreprise</label>
                                            <input type="text" 
                                                className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                                                required value={companySelected?.name} onChange={ (e) => setCompanySelected((prevCompany:Company | undefined) => ({...prevCompany!,name: e.target.value})) }/>
                                        </div>
                                    </div>
                                    <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
                                        <div>
                                            <label htmlFor="email"
                                                className="block mb-2 text-sm font-medium text-gray-900">Email</label>
                                            <input type="email" name="email" id="email"
                                            className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                                             required value={companySelected?.email} onChange={ (e) => setCompanySelected((prevCompany:Company | undefined) => ({...prevCompany!,email: e.target.value})) } />
                                        </div>
                                        <div>
                                            <label htmlFor="numberPhone"
                                                className="block mb-2 text-sm font-medium text-gray-900">Numéro de téléphone</label>
                                            <input type="text" name="text" id="number" required value={companySelected?.number} onChange={ (e) => setCompanySelected((prevCompany:Company | undefined) => ({...prevCompany!,number: e.target.value})) }
                                                className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"/>
                                        </div>
                                    </div>
                          
                                    <div className='mt-4'>
                                        <label htmlFor="address"
                                            className="block mb-2 text-sm font-medium text-gray-900">Adresse</label>
                                        <input type="text" name="text" id="text"
                                            className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                                            required value={companySelected?.address} onChange={ (e) => setCompanySelected((prevCompany:Company | undefined) => ({...prevCompany!,address: e.target.value})) }/>
                                    </div>
                                    <div className="mt-4 grid grid-cols-1 sm:grid-cols-2 gap-4">
                                        <div>
                                            <label htmlFor="email"
                                                className="block mb-2 text-sm font-medium text-gray-900">Code Postal</label>
                                            <input type="text" name="text" id="text"
                                            className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                                             required value={companySelected?.zipcode} onChange={ (e) => setCompanySelected((prevCompany:Company | undefined) => ({...prevCompany!,zipcode: e.target.value})) }/>
                                        </div>
                                        <div>
                                            <label htmlFor="numberPhone"
                                                className="block mb-2 text-sm font-medium text-gray-900">Ville</label>
                                            <input type="text" name="text" id="text"
                                            className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                                            required value={companySelected?.city} onChange={ (e) => setCompanySelected((prevCompany:Company | undefined) => ({...prevCompany!,city: e.target.value})) } />
                                        </div>
                                    </div>
                                    <div className='mt-4'>
                                        <label htmlFor="message"
                                            className="block mb-2 text-sm font-medium text-gray-900">Message</label>
                                        <textarea name="text" id="text"
                                            className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                                            required value={companySelected?.message} onChange={ (e) => setCompanySelected((prevCompany:Company | undefined) => ({...prevCompany!,message: e.target.value})) } />
                                    </div>
                                    </div>
                                    <div className="flex items-center justify-end pt-5 border-t border-solid border-slate-200 rounded-b">
                                        <button type="submit" className="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 text-center">Enregistrer</button>
                                    </div>
                                </form>
                            </Modal>
                            </>
                        ) : null}

                            {error && <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                                    <span className="block sm:inline"> {error}</span>
                                </div>}

                            {success && <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded relative" role="alert">
                                <span className="block sm:inline"> {success}</span>
                            </div>}
                           
                        <div className="flex justify-end mt-4"> 
                            <Link href="/admin/company/new" className="text-white bg-blue-700 hover:bg-blue-800 font-medium rounded-lg text-sm px-5 py-2.5 mr-2 mb-2">
                                Ajouter
                            </Link>
                        </div>

                        <div className="relative overflow-x-auto mt-5">
                            <table className="w-full text-sm text-left text-gray-500">
                                <thead className="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
                                    <tr className="border-b">
                                        <th scope="col" className="px-6 py-4">
                                            Nom de l'entreprise
                                        </th>
                                        <th scope="col" className="px-6 py-4">
                                            Email
                                        </th>
                                        <th scope="col" className="px-6 py-4">
                                            Numéro 
                                        </th>
                                        <th scope="col" className="px-6 py-4">
                                            Adresse
                                        </th>
                                        <th scope="col" className="px-6 py-4">
                                            Action
                                        </th>
                                    </tr>
                                </thead>
                                <tbody>

                                { companies.length > 0 && 
                                    companies.map((company:Company,index) => {
                                        return (

                                            <tr key={index} className={index % 2 == 0 ? ' bg-white' : ' bg-gray-50'}>
                                                <td scope="row" className="px-6 py-3 text-gray-900">
                                                   {company.name}
                                                </td>
                                                <td scope="row" className="px-6 py-3 text-gray-900">
                                                   {company.email}
                                                </td>
                                                <td scope="row" className="px-6 py-3 text-gray-900">
                                                   {company.number}
                                                </td>
                                                <td scope="row" className="px-6 py-3 text-gray-900">
                                                   {company.address} {company.city} {company.zipcode}
                                                </td>
                                                <td className="px-6 py-3 flex">

                                                    <svg onClick={ () => openModal(company, true)} className="w-6 h-6 stroke-blue-500 cursor-pointer" fill="none" strokeWidth={1.5} viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
                                                        <path strokeLinecap="round" strokeLinejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" />
                                                    </svg>

                                            
                                                </td>
                                            </tr>
                                        )
                                    })
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </AdminLayout>
        </>
    )
}


