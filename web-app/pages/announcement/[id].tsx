import Head from 'next/head'
import React, {useCallback, useEffect, useState} from "react";
import HomeLayout from "@/components/layouts/Home";
import {useRouter} from "next/router";
import DisplayImages from "@/components/announcement/DisplayImages";
import {Button, Modal} from "flowbite-react";

interface Announcement {
    name: string;
    description: string;
    firstImage: string;
    base64Images: string[];
    type: string;
    announcementCategories: AnnouncementCategory[];
}

interface AnnouncementCategory {
    category: Category;
}

interface Category {
    name: string;
}


export default function Announcement() {
    const [announcement, setAnnouncement] = useState<Announcement[]>([]);
    const [deleteModal, setDeleteModal] = useState<boolean>(false);
    const [idAnnouncement, setIdAnnouncement] = useState<string>('');
    const [error, setError] = useState("");
    const router = useRouter();

    useEffect(() => {
        document.body.classList.add("bg-custom-light-orange");
    });

    useEffect(() => {
        if (!router.isReady) return;

        const { id } = router.query;
        if (typeof id === 'string') {
            setIdAnnouncement(id);

            fetch(`${process.env.NEXT_PUBLIC_CLIENT_API}/announcement/${id}`, {
                method: 'GET',
            })
                .then(response => response.json())
                .then((data) => {
                    setAnnouncement(data)
                }).catch((error) => {
                console.log(error);

            });
        }
    }, [router.isReady]);

    const deleteAnnouncement = useCallback(async (e: any) => {
        e.preventDefault();

        await fetch(`${process.env.NEXT_PUBLIC_CLIENT_API}/announcement/delete`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            },
            // body: formData
            body: JSON.stringify({
                id: idAnnouncement,
            })
        })
            .then(response => response.json())
            .then((data) => {
                router.push('/announcement');
            }).catch((error) => {
                console.log(error);
            });
    }, [idAnnouncement]);

    return (
        <>
            <Head>
                <title>Ludotter</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>
            <HomeLayout>
                <section>
                    <div className="container mx-auto pt-10 h-screen">
                        {announcement.length > 0 &&
                            <div className="grid grid-cols-1 md:grid-cols-12 h-4/6">
                                <DisplayImages images={announcement[0].base64Images}/>
                                <div className="md:col-span-7 md:col-start-7 my-10 relative">
                                    <h2 className="mb-2 font-semibold leading-none text-gray-900 text-5xl">{announcement[0].name}</h2>
                                    <dl className="mt-16">
                                        <dt className="mb-2 font-semibold leading-none text-gray-900 text-2xl">Description</dt>
                                        <dd className="text-xl text-gray-800 mb-5">{announcement[0].description}</dd>
                                    </dl>
                                    <div className="flex justify-between">
                                        <div className="flex flex-col">
                                            <p className="font-semibold">Catégories :</p>
                                            <div className="py-4">
                                                {announcement[0].announcementCategories.map((item, index) => {
                                                    return (
                                                        <span key={index}
                                                              className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-400 text-white mr-2">
                                                        {item.category.name}
                                                    </span>
                                                    );
                                                })}
                                            </div>
                                        </div>

                                        <div className="flex flex-col">
                                            <p className="font-semibold">Type de l'annonce :</p>
                                            <p className="capitalize py-4">{announcement[0].type}</p>
                                        </div>
                                    </div>

                                    <div className="2xl:absolute bottom-0 left-0">
                                        <Button color="failure" onClick={() => setDeleteModal(true)}>
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-3">
                                                <path strokeLinecap="round" strokeLinejoin="round" d="M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" />
                                            </svg>

                                            Supprimer l'annonce
                                        </Button>
                                    </div>
                                    <Modal
                                        onClose={() => setDeleteModal(false)}
                                        show={deleteModal}
                                        popup
                                        size="md"
                                    >
                                        <Modal.Header />
                                        <Modal.Body>
                                            <div className="text-center">
                                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="mx-auto mb-4 h-14 w-14 text-gray-400">
                                                    <path strokeLinecap="round" strokeLinejoin="round" d="M12 9v3.75m9-.75a9 9 0 11-18 0 9 9 0 0118 0zm-9 3.75h.008v.008H12v-.008z" />
                                                </svg>

                                                <h3 className="mb-5 text-lg font-normal text-gray-500 dark:text-gray-400">
                                                    Voulez-vous vraiment supprimer cette annonce ?
                                                </h3>
                                                <div className="flex justify-center gap-4">
                                                    <Button
                                                        color="failure"
                                                        onClick={deleteAnnouncement}
                                                    >
                                                        Oui, je suis sûr
                                                    </Button>
                                                    <Button
                                                        color="gray"
                                                        onClick={() => setDeleteModal(false)}
                                                    >
                                                        Non, annuler
                                                    </Button>
                                                </div>
                                            </div>
                                        </Modal.Body>
                                    </Modal>
                                </div>
                            </div>
                        }
                    </div>
                </section>
            </HomeLayout>
        </>
    )
}